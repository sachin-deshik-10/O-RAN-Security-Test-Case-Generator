# Pre-commit configuration for O-RAN Security Test Case Generator
# Author: N. Sachin Deshik
# GitHub: sachin-deshik-10

repos:
  # Code formatting
  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        language_version: python3.8
        args: [--line-length=88]

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]

  # Code linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203, E501, W503]
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-import-order

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.4.1
    hooks:
      - id: mypy
        args: [--ignore-missing-imports, --strict]
        additional_dependencies:
          - types-requests
          - types-PyYAML
          - types-python-dateutil

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, -x, tests/]
        exclude: ^tests/

  # General hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: check-xml
      - id: check-merge-conflict
      - id: check-added-large-files
        args: [--maxkb=10000]
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: debug-statements
      - id: name-tests-test
      - id: requirements-txt-fixer
      - id: sort-simple-yaml
      - id: mixed-line-ending
      - id: fix-byte-order-marker

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.35.0
    hooks:
      - id: markdownlint
        args: [--fix, --config, .markdownlint.yaml]

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint.git
    rev: v1.32.0
    hooks:
      - id: yamllint
        args: [-c=.yamllint.yaml]

  # Docker linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.5
    hooks:
      - id: shellcheck

  # Python security and vulnerability scanning
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        args: [--ignore=51668]

  # Jupyter notebook cleaning
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.7.0
    hooks:
      - id: nbqa-black
        additional_dependencies: [black==23.7.0]
      - id: nbqa-isort
        additional_dependencies: [isort==5.12.0]
      - id: nbqa-flake8
        additional_dependencies: [flake8==6.0.0]

  # Remove output from jupyter notebooks
  - repo: https://github.com/kynan/nbstripout
    rev: 0.6.1
    hooks:
      - id: nbstripout

  # Conventional commits
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v2.4.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: package.lock.json

  # License headers
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.1
    hooks:
      - id: insert-license
        files: \.py$
        args:
          - --license-filepath
          - LICENSE_HEADER.txt
          - --comment-style
          - "#"

  # Dependency vulnerability scanning
  - repo: local
    hooks:
      - id: pip-audit
        name: pip-audit
        entry: pip-audit
        language: python
        additional_dependencies: [pip-audit]
        args: [--requirement, requirements.txt]
        pass_filenames: false

  # Custom hooks for project-specific checks
  - repo: local
    hooks:
      - id: check-ml-model-tests
        name: Check ML model tests
        entry: python scripts/check_ml_tests.py
        language: python
        files: ^ml_models/.*\.py$
        pass_filenames: false

      - id: validate-config-files
        name: Validate configuration files
        entry: python scripts/validate_configs.py
        language: python
        files: ^config/.*\.(json|yaml|yml)$
        pass_filenames: false

      - id: check-api-documentation
        name: Check API documentation
        entry: python scripts/check_api_docs.py
        language: python
        files: ^api/.*\.py$
        pass_filenames: false

# Global configuration
default_language_version:
  python: python3.8
  node: 18.16.0

# Exclude certain files and directories
exclude: |
  (?x)^(
      __pycache__/.*|
      \.git/.*|
      \.mypy_cache/.*|
      \.pytest_cache/.*|
      \.venv/.*|
      build/.*|
      dist/.*|
      .*\.egg-info/.*|
      node_modules/.*|
      \.coverage.*|
      htmlcov/.*|
      \.tox/.*|
      migrations/.*|
      static/.*|
      media/.*
  )$

# Minimum pre-commit version
minimum_pre_commit_version: 3.3.0

# Default install hook types
default_install_hook_types: [pre-commit, commit-msg, pre-push]

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip:
    [
      pip-audit,
      check-ml-model-tests,
      validate-config-files,
      check-api-documentation,
    ]
  submodules: false
